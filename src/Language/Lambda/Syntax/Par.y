-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Language.Lambda.Syntax.Par
  ( happyError
  , myLexer
  , pProgram
  , pCommand
  , pListCommand
  , pTerm
  , pTerm1
  , pTerm2
  , pListTerm
  , pScopedTerm
  , pPattern
  , pMetaSubst
  , pUnificationConstraint
  , pListVarIdent
  ) where

import Prelude

import qualified Language.Lambda.Syntax.Abs
import Language.Lambda.Syntax.Lex

}

%name pProgram Program
%name pCommand Command
%name pListCommand ListCommand
%name pTerm Term
%name pTerm1 Term1
%name pTerm2 Term2
%name pListTerm ListTerm
%name pScopedTerm ScopedTerm
%name pPattern Pattern
%name pMetaSubst MetaSubst
%name pUnificationConstraint UnificationConstraint
%name pListVarIdent ListVarIdent
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('            { PT _ (TS _ 1)            }
  ')'            { PT _ (TS _ 2)            }
  ','            { PT _ (TS _ 3)            }
  '.'            { PT _ (TS _ 4)            }
  ';'            { PT _ (TS _ 5)            }
  '='            { PT _ (TS _ 6)            }
  '['            { PT _ (TS _ 7)            }
  ']'            { PT _ (TS _ 8)            }
  'compute'      { PT _ (TS _ 9)            }
  'in'           { PT _ (TS _ 10)           }
  'let'          { PT _ (TS _ 11)           }
  'λ'            { PT _ (TS _ 12)           }
  '↦'            { PT _ (TS _ 13)           }
  '∀'            { PT _ (TS _ 14)           }
  L_VarIdent     { PT _ (T_VarIdent $$)     }
  L_MetaVarIdent { PT _ (T_MetaVarIdent $$) }

%%

VarIdent :: { Language.Lambda.Syntax.Abs.VarIdent }
VarIdent  : L_VarIdent { Language.Lambda.Syntax.Abs.VarIdent $1 }

MetaVarIdent :: { Language.Lambda.Syntax.Abs.MetaVarIdent }
MetaVarIdent  : L_MetaVarIdent { Language.Lambda.Syntax.Abs.MetaVarIdent $1 }

Program :: { Language.Lambda.Syntax.Abs.Program }
Program : ListCommand { Language.Lambda.Syntax.Abs.AProgram $1 }

Command :: { Language.Lambda.Syntax.Abs.Command }
Command
  : 'compute' Term { Language.Lambda.Syntax.Abs.CommandCompute $2 }

ListCommand :: { [Language.Lambda.Syntax.Abs.Command] }
ListCommand
  : {- empty -} { [] } | Command ';' ListCommand { (:) $1 $3 }

Term :: { Language.Lambda.Syntax.Abs.Term }
Term
  : 'λ' Pattern '.' ScopedTerm { Language.Lambda.Syntax.Abs.Lam $2 $4 }
  | 'let' Pattern '=' Term 'in' ScopedTerm { Language.Lambda.Syntax.Abs.Let $2 $4 $6 }
  | Term1 { $1 }

Term1 :: { Language.Lambda.Syntax.Abs.Term }
Term1
  : Term1 Term2 { Language.Lambda.Syntax.Abs.App $1 $2 }
  | Term2 { $1 }

Term2 :: { Language.Lambda.Syntax.Abs.Term }
Term2
  : VarIdent { Language.Lambda.Syntax.Abs.Var $1 }
  | MetaVarIdent '[' ListTerm ']' { Language.Lambda.Syntax.Abs.MetaVar $1 $3 }
  | '(' Term ')' { $2 }

ListTerm :: { [Language.Lambda.Syntax.Abs.Term] }
ListTerm
  : {- empty -} { [] }
  | Term { (:[]) $1 }
  | Term ',' ListTerm { (:) $1 $3 }

ScopedTerm :: { Language.Lambda.Syntax.Abs.ScopedTerm }
ScopedTerm : Term { Language.Lambda.Syntax.Abs.AScopedTerm $1 }

Pattern :: { Language.Lambda.Syntax.Abs.Pattern }
Pattern : VarIdent { Language.Lambda.Syntax.Abs.APattern $1 }

MetaSubst :: { Language.Lambda.Syntax.Abs.MetaSubst }
MetaSubst
  : MetaVarIdent '[' ListVarIdent ']' '↦' ScopedTerm { Language.Lambda.Syntax.Abs.AMetaSubst $1 $3 $6 }

UnificationConstraint :: { Language.Lambda.Syntax.Abs.UnificationConstraint }
UnificationConstraint
  : '∀' ListVarIdent '.' ScopedTerm '=' ScopedTerm { Language.Lambda.Syntax.Abs.AUnificationConstraint $2 $4 $6 }

ListVarIdent :: { [Language.Lambda.Syntax.Abs.VarIdent] }
ListVarIdent
  : {- empty -} { [] }
  | VarIdent { (:[]) $1 }
  | VarIdent ',' ListVarIdent { (:) $1 $3 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

